function [ output_args ] = grad_bilinear_demosaic( input_args )
%GRAD_BILINEAR_DEMOSAIC Summary of this function goes here
%   Detailed explanation goes here
    if 

end

function [ rgb_image ] = grad_bilinear_kernel_rggb(cfa_image)
    % 1. Filter.
    kernel_g_rb = [0 0 -1 0 0;
                   0 0 2 0 0;
                   -1 2 4 2 -1;
                   0 0 2 0 0;
                   0 0 -1 0 0] / 8;
   kernel_rb_g_0 = [ 0 0 1/2 0 0;
                     0 -1 0 -1 0;
                     -1 4 5 4 -1;
                     0 -1 0 -1 0;
                     0 0 1/2 0 0] / 8;
   kernel_rb_g_1 = kernel_rb_g_0';
   kernel_rb_br = [ 0 0 -3/2 0 0;
                    0 2 0 2 0;
                    -3/2 0 6 0 -3/2;
                    0 2 0 2 0;
                    0 0 -3/2 0 0] / 8;
   padded_cfa = paddarray_symmetric(cfa_image, 2);
   filter_cfa_g_rb = filter2(kernel_g_rb, padded_cfa);
   filter_cfa_rb_g_0 = filter2(kernel_rb_g_0, padded_cfa);
   filter_cfa_rb_g_1 = filter2(kernel_rb_g_1, padded_cfa);
   filter_cfa_rb_br = filter2(kernel_rb_br, padded_cfa);
   
   % 2. Get the rgb image.
   rgb_image = zeros(size(cfa_image,1),size(cfa_image,2),3);
   % g channel
   rgb_image(:,:,2) = cfa_image;
   rgb_image(1:2:end,1:2:end,2) = filter_cfa_g_rb(1:2:end,1:2:end);
   rgb_image(2:2:end,2:2:end,2) = filter_cfa_g_rb(2:2:end,2:2:end);
   % r channel
   rgb_image(:,:,1) = cfa_image;
   rgb_image(1:2:end,2:2:end,1) = filter_cfa_rb_g_0(1:2:end,2:2:end);
   rgb_image(2:2:end,1:2:end,1) = filter_cfa_rb_g_1(2:2:end,1:2:end);
   rgb_image(2:2:end,2:2:end,1) = filter_cfa_rb_br(2:2:end,2:2:end);
   % b channel
   rgb_image(:,:,2) = cfa_image;
   rgb_image(1:2:end,2:2:end,3) = filter_cfa_rb_g_1(1:2:end,2:2:end);
   rgb_image(2:2:end,1:2:end,3) = filter_cfa_rb_g_0(2:2:end,1:2:end);
   rgb_image(1:2:end,1:2:end,3) = filter_cfa_rb_br(1:2:end,1:2:end);
end